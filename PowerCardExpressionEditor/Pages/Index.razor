@page "/"
@inherits LayoutComponentBase
@implements IDisposable
@inject IJSRuntime JS
@using Blazorise
@using Blazorise.Components
@using Microsoft.AdaptiveFX.Memory
@using Microsoft.Bot.Schema
@using Microsoft.Extensions.Logging.Abstractions
@using Microsoft.Extensions.Logging.Debug
@using Microsoft.PowerCards.Scripting.Functions
@using Microsoft.PowerFx
@using Microsoft.PowerFx.LanguageServerProtocol.Protocol
@using Newtonsoft.Json
@using NJsonSchema
@using Microsoft.AdaptiveFX;
@using BlazorMonaco
@using Microsoft.PowerCards;
@using Microsoft.PowerCards.Interfaces;
@using Microsoft.PowerCards.Scripting;

<!-- @using BlazorMonaco.Bridge-->
@using Newtonsoft.Json.Linq
<!-- layout -->
<div class="pageGrid">
    <!-- <TextEdit class="grid-expression" Placeholder="Enter expression..." @bind-Text="Expression" Size="Size.Large" /> -->
    <Alert Class="grid-alert" Color="Color.Warning" @bind-Visible="@ShowAlert">
        <AlertMessage>
            Error
        </AlertMessage>
        <AlertMessage>
            @Error
        </AlertMessage>
    </Alert>

    <Text Class="grid-memory-heading">Memory Diff</Text>

    <Text Class="grid-eval-result-heading">Last Statement Result</Text>

    <MonacoEditor @ref="_powerfx" Id="powerfx" ConstructionOptions="PowerFXContructionOptions" CssClass="grid-expression"
                  OnDidChangeModelContent="OnEditorChangeModelContent" />

    <MonacoDiffEditor @ref="_memoryDiff" Id="memory" ConstructionOptions="DiffEditorConstructionOptions" CssClass="grid-memory"
                      OnDidInit="OnMemoryDidInit" OnDidChangeModelContentOriginal="OnMemoryChangeModelContentOriginal" />

    <MonacoEditor @ref="_evalResult" Id="evalResult" ConstructionOptions="ResultContructionOptions" CssClass="grid-eval-result" />


</div>


@code {
    private ILogger _logger = new DebugLoggerProvider().CreateLogger(nameof(Index));
    private readonly static Lazy<IDictionary<string, ExpressionEvaluator>> s_functions = new Lazy<IDictionary<string, ExpressionEvaluator>>(() =>
        {
            Dictionary<string, ExpressionEvaluator> functions = new Dictionary<string, ExpressionEvaluator>();
            functions.Add(new Navigate().Type, new Navigate());
            functions.Add(new Back().Type, new Back());
            functions.Add(new RunFlow().Type, new RunFlow());
            functions.Add(new ShowMessage().Type, new ShowMessage());
            functions.Add(new AppendItem().Type, new AppendItem());
            functions.Add(new RemoveAt().Type, new RemoveAt());

        // add powerFx functions we don't have.
        foreach (var powerFunction in new RecalcEngine().GetAllFunctionNames())
            {
                if (!Microsoft.AdaptiveFX.Expression.Functions.ContainsKey(powerFunction) && !functions.ContainsKey(powerFunction))
                {
                    System.Diagnostics.Debug.WriteLine(powerFunction + "(...)");
                    functions.Add(powerFunction, new PowerFunctionEvaluator(powerFunction, ReturnType.Object));
                }
            }
            return functions;
        });

    private ExpressionParser _parser = new ExpressionParser((type) =>
    {
        if (s_functions.Value.TryGetValue(type, out var func))
        {
            return func;
        }

        return Microsoft.AdaptiveFX.Expression.Functions[type];
    });

    private string grid = default;
    private MonacoEditor _powerfx = default;
    private MonacoDiffEditor _memoryDiff = default;
    private MonacoEditor _evalResult = default;
    private DotNetObjectReference<Index> _objectReference = default;
    private string _expression = String.Empty;

    public string Error { get; set; } = String.Empty;

    private bool ShowAlert { get { return !String.IsNullOrEmpty(this.Error); } set { } }

    public string Expression
    {
        get
        {
            return _expression;
        }
        set
        {
            _expression = value;
            EvaluateExpression().ContinueWith(x => x.IsFaulted);
        }
    }

    protected override void OnInitialized()
    {
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            _objectReference = DotNetObjectReference.Create(this);
            JS.InvokeVoidAsync("PowerFX.registerLanguage", _objectReference);
        }
    }
    async Task EvaluateExpression()
    {
        var data = await _memoryDiff.OriginalEditor.GetValue();
        var dataObj = YamlConvert.DeserializeObject<JObject>(data);

        // format data window
        var dataClean = YamlConvert.SerializeObject(dataObj);
        if (String.Compare(data, dataClean) != 0)
        {
            await _memoryDiff.OriginalEditor.SetValue(dataClean);
            await _memoryDiff.ModifiedEditor.SetValue(dataClean);
        }

        if (!String.IsNullOrEmpty(this._expression))
        {
            try
            {
                this.Error = String.Empty;
                var expression = _parser.Parse(this._expression);
                var result = await expression.TryEvaluate(dataObj);
                await _evalResult.SetValue(YamlConvert.SerializeObject(result));
                await _memoryDiff.ModifiedEditor.SetValue(YamlConvert.SerializeObject(dataObj));
            }
            catch (Exception err)
            {
                this.Error = err.Message;
                await _evalResult.SetValue(" ");
                await _memoryDiff.ModifiedEditor.SetValue(dataClean);
            }
            this.StateHasChanged();
        }
        await _memoryDiff.Layout();
    }

    private int GetCaretFromPosition(string expression, BlazorMonaco.Position position)
    {
        var lines = expression.Split('\n');
        var caret = position.Column - 1;
        for (int i = 0; i < position.LineNumber - 1; i++)
        {
            caret += lines[i].Length + 1;
        }
        return caret;
    }

    private PowerCard CreatePowerCard(JObject data)
    {
        ChannelAccount viewer = new ChannelAccount();
        if (data.ContainsKey("viewer"))
        {
            JObject val = (JObject)data.GetValue("viewer") ?? new JObject();
            viewer = val.ToObject<ChannelAccount>();
        }

        var invoke = new AdaptiveCardInvokeValue()
            {
                Action = new AdaptiveCardInvokeAction()
                {
                    Verb = "show",
                }
            };
        if (data.ContainsKey("action"))
        {
            JObject val = (JObject)data.GetValue("action") ?? new JObject();
            invoke.Action = val.ToObject<AdaptiveCardInvokeAction>();
        }

        var json = data.ToString();
        var schema = JsonSchema.FromSampleJson(json);
        var schema2 = Newtonsoft.Json.Schema.JSchema.Parse(schema.ToJson());
        schema2.Properties.Remove("viewer");
        var powerCard = new PowerCard()
            {
                Variables = schema2.Properties
            };
        //var instanceId = Guid.NewGuid().ToString();
        //var memory = new PowerCardMemory(powerCard,
        //    new Activity(ActivityTypes.Invoke)
        //        {
        //            ServiceUrl = "https:about",
        //            ChannelId = $"api",
        //            Id = instanceId,
        //            From = viewer,
        //            Recipient = new ChannelAccount() { Id = "bot" },
        //            Conversation = new ConversationAccount() { Id = instanceId },
        //            Value = invoke
        //        },
        //    invoke.Action,
        //    new JObject(),
        //    new JObject(),
        //    data
        //);
        return powerCard;
    }

    private async Task<AdaptiveFXScriptRunner> CreateScriptRunner(PowerCard powerCard)
    {
        var context = new ScriptContext(powerCard);
        return new AdaptiveFXScriptRunner(_logger, context);
    }

    [JSInvokable(nameof(PowerFXCompletionItems))]
    public async Task<object[]> PowerFXCompletionItems(BlazorMonaco.Position position)
    {
        var expression = await _powerfx.GetValue();
        int caret = GetCaretFromPosition(expression, position);
        var data = await _memoryDiff.OriginalEditor.GetValue();
        var powerCard = CreatePowerCard(YamlConvert.DeserializeObject<JObject>(data));
        var scriptRunner = await CreateScriptRunner(powerCard);
        var completionItems = await scriptRunner.GetCompletionItemsAsync(expression, caret, CancellationToken.None);
        return completionItems.Select(ci => new
        {
            documentation = ci.Documentation,
            detail = ci.Detail,
            kind = ci.Kind,
            label = ci.Label,
            insertText = ci.Label
        }).ToArray();
    }


    [JSInvokable(nameof(PowerFXSignatureHelp))]
    public async Task<SignatureHelp> PowerFXSignatureHelp(BlazorMonaco.Position position)
    {
        var expression = await _powerfx.GetValue();
        int caret = GetCaretFromPosition(expression, position);
        var data = await _memoryDiff.OriginalEditor.GetValue();
        var powerCard = CreatePowerCard(YamlConvert.DeserializeObject<JObject>(data));
        var scriptRunner = await CreateScriptRunner(powerCard);
        var signatureHelp = await scriptRunner.GetSignatureHelpAsync(expression, caret, CancellationToken.None);
        return signatureHelp;
    }

    [JSInvokable(nameof(OnResize))]
    public async Task OnResize()
    {
        await _memoryDiff.Layout();
    }

    private async Task OnMemoryDidInit(MonacoEditorBase editor)
    {
        // Get or create the original model
        var memory = @"
isVip: true
viewer:
  id: '123123123'
  name: John Doe
  aadObjectId: '{123123-123123-123123}'
numbers: [1, 2, 3, 4, 5]
homeAddress:
  street: 123 electric boogaloo
  city: Funkytown
  state: Florida
  zip: 12345
workAddress:
  street: Main street
  city: Pottersville
  state: Hollywood
  zip: 54321
phoneNumbers:
- type: mobile
  number: 555-123-4567
- type: mobile
  number: 555-123-0987
- type: home
  number: 555-888-9999
- type: work
  number: 555-777-1111
";
        await _memoryDiff.SetModel(new DiffEditorModel
            {
                Original = await MonacoEditorBase.CreateModel(memory, "yaml"),
                Modified = await MonacoEditorBase.CreateModel(memory, "yaml")
            });
    }

    private async Task OnMemoryChangeModelContentOriginal(ModelContentChangedEvent evt)
    {
        await EvaluateExpression();
    }

    private async Task OnEditorChangeModelContent(ModelContentChangedEvent eventArgs)
    {
        this.Expression = await _powerfx.GetValue();
    }

    private StandaloneEditorConstructionOptions PowerFXContructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                Language = "powerfx",
                Theme = "vs-dark",
                Folding = true,
                AutomaticLayout = true,
                Value = ""
            };
    }

    private StandaloneEditorConstructionOptions ResultContructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                Language = "yaml",
                Theme = "vs-dark",
                Folding = true,
                AutomaticLayout = true,
                Value = " "
            };
    }

    private DiffEditorConstructionOptions DiffEditorConstructionOptions(MonacoDiffEditor editor)
    {
        return new DiffEditorConstructionOptions
            {
                OriginalEditable = true,
                AutoIndent = true,
                FormatOnPaste = true,
            };
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
        if (_objectReference != null)
        {
            //Now dispose our object reference so our component can be garbage collected
            _objectReference.Dispose();
        }
    }
}
