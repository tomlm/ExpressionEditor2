@page "/"
@inherits LayoutComponentBase
@using BlazorCssGrid
@using Blazorise
@using Blazorise.Components
@using Newtonsoft.Json
@using Microsoft.Bot.Expressions;
@using Microsoft.AspNetCore.Components.Web
@using BlazorStyled
@using Blazaco
@using Blazaco.Editor
@using Blazaco.Editor.Options

<!-- layout -->
    <div class="@grid">
        <TextEdit class="grid-expression" Placeholder="Enter expression..." @bind-Text="Expression" />

        <MonacoEditor @ref="_editor" Model="_editorModel" class="grid-data" />

        <Alert Class="grid-alert" Color="Color.Warning" @bind-IsShow="ShowAlert">
            <TextEdit IsPlaintext="true" @bind-Text="@Error" />
        </Alert>

        <MonacoEditor @ref="_editorResult" Model="_editorResultModel" class="grid-result" />
    </div>

<!-- styles-->
<Styled @bind-Classname="@grid">
    <GridContainer Rows="auto auto 1fr" RowGap="10px"
                   Columns="1fr 1fr" ColumnGap="10px" />
    width:100%;
    height:100%;
    font-family: 'Segoe UI', Tahoma, Helvetica, sans-serif;
    padding:10px;

    & .grid-expression {
        <GridItem Row="1" Column="1" ColumnSpan="2" />
       padding: 10px;
    }

    & .grid-alert {
        <GridItem Row="2" Column="1" ColumnSpan="2" />
        padding: 10px;
    }


    & .grid-data {
        <GridItem Row="3" Column="1"/>
        height:100%;
        width:100%;
    }

    & .grid-result {
        <GridItem Row="3" Column="2"/>
        font-family: monospace, monospace;
        font-size: 14px;
    }
</Styled>

@functions {
    private string grid;

    private EditorModel _editorModel { get; set; }
    private MonacoEditor _editor;

    private EditorModel _editorResultModel { get; set; }
    private MonacoEditor _editorResult;

    private string error;
    public string Error
    {
        get
        {
            return error;
        }
        set
        {
            error = value;
        }
    }

    private bool ShowAlert { get { return !String.IsNullOrEmpty(this.Error); } set { } }

    private object dataObj;
    private string data;
    public string Data
    {
        get
        {
            return data;
        }
        set
        {
            try
            {
                dataObj = JsonConvert.DeserializeObject(value);
                data = JsonConvert.SerializeObject(dataObj, Formatting.Indented);
            }
            catch (Exception)
            {
                dataObj = new object();
                data = value;
            }
            OnChanged();
        }
    }

    private Expression exp;
    private string expression;
    public string Expression
    {
        get
        {
            return expression;
        }
        set
        {
            expression = value;
            exp = null;
            try
            {
                exp = engine.Parse(value);
                Error = null;
            }
            catch (Exception err)
            {
                Error = err.Message;
            }
            OnChanged();
        }
    }

    public string Result { get; set; }

    private ExpressionEngine engine = new ExpressionEngine();


    protected override void OnInitialized()
    {
        Data = @"{
'conversation':
{
'firstName': 'John',
'lastName' : 'doe',
'age'      : 26,
'address'  : {
'streetAddress': 'naist street',
'city'         : 'Nara',
'postalCode'   : '630-0192'
},
'phoneNumbers': [
{
'type'  : 'iPhone',
'number': '0123-4567-8888'
},
{
'type'  : 'home',
'number': '0123-4567-8910'
}
]
}
}";
        var options = new EditorOptions()
        {
            Value = JsonConvert.SerializeObject(JsonConvert.DeserializeObject(Data), Formatting.Indented),
            Language = "json",
            Theme = "vs-dark",
            AutomaticLayout = true
        };

        _editorModel = new EditorModel(options);

        options = new EditorOptions()
        {
            Value = " ",
            Language = "json",
            Theme = "vs-dark",
            AutomaticLayout = true,
            ReadOnly = true
        };

        _editorResultModel = new EditorModel(options);
    }

    void OnChanged()
    {
        this.Result = string.Empty;
        if (this.exp != null && this.dataObj != null)
        {
            var (result, error) = this.exp.TryEvaluate(dataObj);
            if (error != null)
            {
                this.Error = error;
            }
            else
            {
                this.Error = null;
                this.Result = JsonConvert.SerializeObject(result, Formatting.Indented);
                _editorResult.SetValue(this.Result);
            }
        }
    }
}
