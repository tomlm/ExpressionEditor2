@page "/"
@inherits LayoutComponentBase
@using BlazorCssGrid
@using Blazorise
@using Blazorise.Components
@using Newtonsoft.Json
@using Microsoft.Bot.Expressions;
@using Microsoft.AspNetCore.Components.Web
@using BlazorStyled

<!-- layout -->
<div class="@cssContainer" style="display:grid;">
    <TextEdit class="@cssExpression" Placeholder="Enter expression..." @bind-Text="Expression" />

    <MemoEdit class="@cssData" @bind-Text="@Data" />

    <div class="@cssResultPane">
        <Alert Class="@cssAlert" Color="Color.Warning" @bind-IsShow="ShowAlert">
            <TextEdit IsPlaintext="true" @bind-Text="@Error" />
        </Alert>

        <MemoEdit Class="@cssResult" Text="@Result" IsReadonly="true" />
    </div>
</div>

<!-- styles-->
<Styled @bind-Classname="@cssContainer">
    <GridContainer Rows="auto 1fr" RowGap="10px"
                   Columns="1fr 1fr" ColumnGap="10px" />
    width:100%;
    height:100%;
    font-family: 'Segoe UI', Tahoma, Helvetica, sans-serif;
    padding:10px;
</Styled>

<Styled @bind-Classname="@cssExpression">
    <GridItem Column="1" ColumnSpan="2" />
    padding: 10px;
</Styled>

<Styled @bind-Classname="@cssData">
    <GridItem Row="2" />
    padding: 10px;
</Styled>

<Styled @bind-Classname="@cssResultPane">
    <GridItem Row="2" Column="2" />
    <GridContainer Rows="auto 1fr"
                   Columns="100%" />
</Styled>

<Styled @bind-Classname="@cssAlert">
    <GridItem Row="1" />
    padding: 10px;
</Styled>

<Styled @bind-Classname="@cssResult">
    <GridItem Row="2" />
</Styled>

@functions {
    private string cssContainer;
    private string cssExpression;
    private string cssData;
    private string cssResultPane;
    private string cssAlert;
    private string cssResult;

    private string error;
    public string Error
    {
        get
        {
            return error;
        }
        set
        {
            error = value;
        }
    }

    private bool ShowAlert { get { return !String.IsNullOrEmpty(this.Error); } set { } }
    private Alert alert;

    private object dataObj;
    private string data;
    public string Data
    {
        get
        {
            return data;
        }
        set
        {
            try
            {
                dataObj = JsonConvert.DeserializeObject(value);
                data = JsonConvert.SerializeObject(dataObj, Formatting.Indented);
            }
            catch (Exception)
            {
                dataObj = new object();
                data = value;
            }
            OnChanged();
        }
    }

    private Expression exp;
    private string expression;
    public string Expression
    {
        get
        {
            return expression;
        }
        set
        {
            expression = value;
            exp = null;
            try
            {
                exp = engine.Parse(value);
                Error = null;
            }
            catch (Exception err)
            {
                Error = err.Message;
            }
            OnChanged();
        }
    }

    public string Result { get; set; }

    private ExpressionEngine engine = new ExpressionEngine();


    protected override void OnInitialized()
    {
        Data = @"{
'conversation':
{
'firstName': 'John',
'lastName' : 'doe',
'age'      : 26,
'address'  : {
'streetAddress': 'naist street',
'city'         : 'Nara',
'postalCode'   : '630-0192'
},
'phoneNumbers': [
{
'type'  : 'iPhone',
'number': '0123-4567-8888'
},
{
'type'  : 'home',
'number': '0123-4567-8910'
}
]
}
}";
    }

    void OnChanged()
    {
        this.Result = string.Empty;
        if (this.exp != null && this.dataObj != null)
        {
            var (result, error) = this.exp.TryEvaluate(dataObj);
            if (error != null)
            {
                this.Result = error;
            }
            else
            {
                this.Result = JsonConvert.SerializeObject(result, Formatting.Indented);
            }
        }
    }
}
