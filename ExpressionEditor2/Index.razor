@page "/"
@inherits LayoutComponentBase
@using BlazorCssGrid
@using Blazorise
@using Blazorise.Components
@using Newtonsoft.Json
@using AdaptiveExpressions;
@using Microsoft.AspNetCore.Components.Web
@using BlazorStyled
@using Blazaco
@using Blazaco.Editor
@using Blazaco.Editor.Options

<!-- layout -->
<div class="@grid">
    <TextEdit class="grid-expression" Placeholder="Enter expression..." @bind-Text="Expression" />

    <MonacoEditor @ref="_editor" Model="_editorModel" class="grid-data" />

    <Text Class="grid-dataHeading">Sample Data</Text>

    <Alert Class="grid-alert" Color="Color.Warning" @bind-IsShow="ShowAlert">
        <TextEdit IsPlaintext="true" @bind-Text="@Error" />
    </Alert>

    <Text Class="grid-resultHeading">Expression Result</Text>

    <MonacoEditor @ref="_editorResult" Model="_editorResultModel" class="grid-result" />

    <div class="grid-sidebar">
        <Label Class="grid-sidebarHeading">Math</Label>
        <ul>
            <li>min(value1, value2)</li>
            <li>max(value1, value2)</li>
            <li>average(array)</li>
            <li>sum(array)</li>
            <li>range(array, count)</li>
        </ul>

        <label Class="grid-sidebarHeading">Comparisons</label>
        <ul>
            <li>exists(property)</li>
        </ul>

        <label Class="grid-sidebarHeading">String</label>
        <ul>
            <li>length(string)</li>
            <li>replace(new, old)</li>
            <li>replaceIgnoreCase(new, old)</li>
            <li>split(string, splitCharsAsString)</li>
            <li>substring(string, start, length)</li>
            <li>toLower(string)</li>
            <li>toUpper(string)</li>
            <li>trim(string)</li>
            <li>endsWith(string, val)</li>
            <li>startsWith(string, val)</li>
            <li>countWord(string)</li>
            <li>addOrdinal(string)</li>
            <li>newGuid()</li>
            <li>indexOf(stringOrArray, string)</li>
            <li>lastIndexOf(string, string)</li>
        </ul>

        <label Class="grid-sidebarHeading">Collection</label>
        <ul>
            <li>count(array)</li>
            <li>contains(array, value)</li>
            <li>empty(array)</li>
            <li>join(array, array)</li>
            <li>first(array)</li>
            <li>last(array)</li>
            <li>foreach(array, itemName, selectExpression)</li>
            <li>select(array, itemName, selectExpression)</li>
            <li>where(array, itemName, filterExpression)</li>
            <li>union(array, array)</li>
            <li>intersection(array, array)</li>
            <li>skip(array, number)</li>
            <li>take(array, number)</li>
            <li>subArray(array, start, end)</li>
            <li>sortBy(array, propertyName)</li>
            <li>sortByDescending(array, propertyName)</li>
            <li>indicesAndValues(array)</li>
        </ul>

        <label Class="grid-sidebarHeading">DateTime</label>
        <ul>
            <li>addDays(date, days)</li>
            <li>addHours(date, hours)</li>
            <li>addMinutes(date, minutes)</li>
            <li>addSeconds(date, seconds)</li>
            <li>dayOfMonth(date)</li>
            <li>dayOfWeek(date)</li>
            <li>dayOfYear(date)</li>
            <li>month(date)</li>
            <li>date(date)</li>
            <li>year(date)</li>
            <li>utcNow()</li>
            <li>formatDateTime(date, format)</li>
            <li>subtractFromTime(date, timespan)</li>
            <li>dateReadBack(date1, date2)</li>
            <li>getTimeOfDay(date)</li>
            <li>getFutureTime(date, format)</li>
            <li>getPastTime(date, format)</li>
            <li>convertFromUTC(date, format)</li>
            <li>convertToUTC(date, format)</li>
            <li>addToTime(time, interval, timeUnit, format)</li>
            <li>startOfDay(time, format)</li>
            <li>startOfHour(time, format)</li>
            <li>startOfMonth(date, format)</li>
            <li>ticks(date)</li>
        </ul>

        <label Class="grid-sidebarHeading">Conversions</label>
        <ul>
            <li>float(property)</li>
            <li>int(property)</li>
            <li>string(property)</li>
            <li>bool(property)</li>
            <li>array(property)</li>
            <li>binary(property)</li>
            <li>base64(property</li>
            <li>base64ToBinary(property)</li>
            <li>base64ToString(property)</li>
            <li>dataUri(property)</li>
            <li>dataUriToBinary(property)</li>
            <li>dataUriToString(property)</li>
            <li>uriComponent(property)</li>
            <li>uriComponentToString(property)</li>
            <li>xml(property)</li>
            <li>json(property)</li>
        </ul>

        <label Class="grid-sidebarHeading">URI Parsing Functions</label>
        <ul>
            <li>uriHost(property)</li>
            <li>uriPath(property)</li>
            <li>uriPathAndQuery(property)</li>
            <li>uriPort(property)</li>
            <li>uriQuery(property)</li>
            <li>uriScheme(property)</li>
        </ul>


        <label Class="grid-sidebarHeading">Misc</label>
        <ul>
            <li>Constant</li>
            <li>Lambda</li>
            <li>if</li>
            <li>rand</li>
        </ul>

        <label Class="grid-sidebarHeading">Object manipulation</label>
        <ul>
            <li>coalesce</li>
            <li>xPath(property, xPathString)</li>
            <li>setPathToValue(property, value)</li>
            <li>jPath(property, jPathString)</li>
        </ul>

        <label Class="grid-sidebarHeading">Regular expression</label>
        <ul>
            <li>isMatch(property, regularExpression)</li>
        </ul>

        <label Class="grid-sidebarHeading">Humanize</label>
        <ul>
            <li>humanizer.humanizeDateTime(date,  ?culture)</li>
            <li>humanizer.humanizeDateTime(date, relDate, ?culture)</li>
            <li>humanizer.humanizeTimeSpan(span, ?culture)</li>
            <li>humanizer.humanizeTimeSpan(span, GrammaticalCase,?culture)</li>
            <li>humanizer.dateTimeToOrdinalWords(date, ?culture)</li>
            <li>humanizer.dateTimeToOrdinalWords(date, ?GrammaticalCase, ?culture)</li>
            <li>humanizer.pluralize(text, ?isKnownToBeSinglar)</li>
            <li>humanizer.singularlize(text, ?isKnownToBePlural)</li>
            <li>humanizer.toQuantity(name, quantity, ?style)</li>
            <li>humanizer.toQuantity(name, quantity, ?style)</li>
            <li>humanizer.toQuantity(name, quantity, ?style)</li>
        </ul>

        <label Class="grid-sidebarHeading">Format functions</label>
        <ul>
            <li>dotnet.numberToString(format,?culture)</li>
            <li>dotnet.intToString(format,?culture)</li>
            <li>dotnet.dateTimeToString(format,?culture)</li>
            <li>dotnet.timeSpanToString(format,?culture)</li>
        </ul>


        <label Class="grid-sidebarHeading">Text transforms</label>
        <ul>
            <li>humanizer.truncate(text, chars, truncation)</li>
            <li>humanizer.truncateWords(text, words, truncation)</li>
            <li>humanizer.camelize(text)</li>
            <li>humanizer.dashorize(text)</li>
            <li>humanizer.hyphenate(text)</li>
            <li>humanizer.kebaberize(text)</li>
            <li>humanizer.pascalize(text)</li>
            <li>humanizer.titleize(text)</li>
        </ul>

        <label Class="grid-sidebarHeading">Number functions</label>
        <ul>
            <li>humanizer.number2metric(text)</li>
            <li>humanizer.metric2number(text, ?hasSpace, ?decimals)</li>
            <li>humanizer.number2words(number, ?culture)</li>
            <li>humanizer.number2words(number, ?gender, ?culture)</li>
            <li>humanizer.number2ordinalWords(number, ?culture)</li>
            <li>humanizer.number2ordinalWords(number, ?gender, ?culture)</li>
            <li>humanizer.number2ordinal(number)</li>
            <li>humanizer.number2ordinal(number, ?gender)</li>
            <li>humanizer.fromRoman(text)</li>
            <li>humanizer.toRoman(number)</li>
        </ul>

        <label Class="grid-sidebarHeading">Text Capitalization</label>
        <ul>
            <li>humanizer.allCaps(text)</li>
            <li>humanizer.lowerCase(text)</li>
            <li>humanizer.sentence(text)</li>
            <li>humanizer.title(text)</li>
        </ul>


        <label Class="grid-sidebarHeading">TimeSpan</label>
        <ul>
            <li>humanizer.weeks(number)</li>
            <li>humanizer.days(number)</li>
            <li>humanizer.hours(number)</li>
            <li>humanizer.minutes(number)</li>
            <li>humanizer.seconds(number)</li>
            <li>humanizer.milliseconds(number)</li>
        </ul>

        <label Class="grid-sidebarHeading">Bytes</label>
        <ul>
            <li>humanizer.bits(number)</li>
            <li>humanizer.bytes(number)</li>
            <li>humanizer.kilobytes(number)</li>
            <li>humanizer.megabytes(number)</li>
            <li>humanizer.gigabytes(number)</li>
            <li>humanizer.terabytes(number)</li>
        </ul>

        <label Class="grid-sidebarHeading">Headings</label>
        <ul>
            <li>humanizer.degress2heading(number, ?culture)</li>
            <li>humanizer.degress2heading(number, headingstyle, ?culture)</li>
            <li>humanizer.heading2degrees(heading())</li>
        </ul>
    </div>
</div>

<!-- styles-->
<Styled @bind-Classname="@grid">
    <GridContainer Rows="auto auto auto 1fr" RowGap="2px"
                   Columns="auto 1fr 1fr" ColumnGap="10px" />
    width:100%;
    height:100%;
    font-family: 'Segoe UI', Tahoma, Helvetica, sans-serif;
    padding:10px;

    & .grid-expression {
    <GridItem Row="1" Column="2" ColumnSpan="2" />
    padding: 10px;
    }

    & .grid-sidebar {
    <GridItem Row="1" RowSpan="4" Column="1" VerticalScrollbar="auto" />
    padding: 2px;
    background-color: lightgray;
    font-size: 11px;
    padding-left:10px;
    }

    .grid-sidebarHeading {
    font-size: 14px;
    font-weight: bold;
    }

    sidebarHeading
    & .grid-alert {
    <GridItem Row="2" Column="2" ColumnSpan="2" />
    padding: 2px;
    font-size: 14px;
    }

    & .grid-dataHeading {
    <GridItem Row="3" Column="2" />
    font-size:12px;
    font-size:12px;
    font-weight:bold;
    color:gray;
    padding: 2px;
    }

    & .grid-resultHeading {
    <GridItem Row="3" Column="3" />
    font-size:12px;
    font-weight:bold;
    color:gray;
    padding: 2px;
    }

    & .grid-data {
    <GridItem Row="4" Column="2" />
    height:100%;
    width:100%;
    }

    & .grid-result {
    <GridItem Row="4" Column="3" />
    font-family: monospace, monospace;
    font-size: 14px;
    }
</Styled>

@functions {
    private string grid;

    private EditorModel _editorModel { get; set; }
    private MonacoEditor _editor;

    private EditorModel _editorResultModel { get; set; }
    private MonacoEditor _editorResult;

    private string error;
    public string Error { get { return error; } set { error = value; } }

    private bool ShowAlert { get { return !String.IsNullOrEmpty(this.Error); } set { } }

    private Expression exp;
    private string expression;
    public string Expression
    {
        get
        {
            return expression;
        }
        set
        {
            expression = value;
            exp = null;
            try
            {
                exp = AdaptiveExpressions.Expression.Parse(value);
                Error = null;
            }
            catch (Exception err)
            {
                Error = err.Message;
            }

            OnChanged().ContinueWith(x => x.IsFaulted);
        }
    }

    protected override void OnInitialized()
    {
        var data = @"{'conversation':{'firstName': 'John','lastName' : 'doe','age': 26,'address': {'streetAddress': 'naist street','city': 'Nara','postalCode': '630-0192'},'phoneNumbers': [{'type'  : 'iPhone','number': '0123-4567-8888'},{'type'  : 'home','number': '0123-4567-8910'}]}}";

        _editorModel = new EditorModel(new EditorOptions()
        {
            Value = JsonConvert.SerializeObject(JsonConvert.DeserializeObject(data), Formatting.Indented),
            Language = "json",
            Theme = "vs-dark",
            Folding = true,
            AutomaticLayout = true
        });

        _editorResultModel = new EditorModel(new EditorOptions()
        {
            Value = " ",
            Language = "json",
            Theme = "vs-dark",
            Folding = true,
            AutomaticLayout = true,
            ReadOnly = true
        });
    }

    async Task OnChanged()
    {
        var data = await _editor.GetValue();
        var dataObj = JsonConvert.DeserializeObject(data);

        // format data window
        var dataClean = JsonConvert.SerializeObject(dataObj, Formatting.Indented);
        if (String.Compare(data, dataClean) != 0)
        {
            await _editor.SetValue(dataClean);
        }

        if (this.exp != null)
        {
            var (result, error) = this.exp.TryEvaluate(dataObj);
            if (error != null)
            {
                this.Error = error;
                await _editorResult.SetValue(" ");
            }
            else
            {
                this.Error = null;
                var resultJson = JsonConvert.SerializeObject(result, Formatting.Indented);
                await _editorResult.SetValue(resultJson);
            }
        }
    }
}
